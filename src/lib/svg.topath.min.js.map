{"version":3,"file":"svg.topath.min.js","sources":["../src/svg.topath.js"],"sourcesContent":["\r\nimport { Path, Shape, extend } from '@svgdotjs/svg.js'\n\n// Normalise attributes\nconst normaliseAttributes = (attr) => {\n  for (const a in attr) {\n    if (!/fill|stroke|opacity|transform/.test(a)) { delete attr[a] }\n  }\n\n  return attr\n}\n\nextend(Shape, {\r\n  // Convert element to path\r\n  toPath (replace = true) {\r\n    var d\r\n\r\n    switch (this.type) {\r\n    case 'rect': {\r\n      let {\r\n        width: w,\r\n        height: h,\r\n        rx,\r\n        ry,\r\n        x,\r\n        y\r\n      } = this.attr(['width', 'height', 'rx', 'ry', 'x', 'y'])\r\n\r\n      // normalise radius values, just like the original does it (or should do)\r\n      if (rx < 0) rx = 0\r\n      if (ry < 0) ry = 0\r\n      rx = rx || ry\r\n      ry = ry || rx\r\n      if (rx > w / 2) rx = w / 2\r\n      if (ry > h / 2) ry = h / 2\r\n\r\n      if (rx && ry) {\r\n        // if there are round corners\r\n\r\n        d = [\r\n          ['M', rx + x, y],\r\n          ['h', w - 2 * rx],\r\n          ['a', rx, ry, 0, 0, 1, rx, ry],\r\n          ['v', h - 2 * ry],\r\n          ['a', rx, ry, 0, 0, 1, -rx, ry],\r\n          ['h', -w + 2 * rx],\r\n          ['a', rx, ry, 0, 0, 1, -rx, -ry],\r\n          ['v', -h + 2 * ry],\r\n          ['a', rx, ry, 0, 0, 1, rx, -ry],\r\n          ['z']\r\n        ]\r\n      } else {\r\n        // no round corners, no need to draw arcs\r\n        d = [\r\n          ['M', x, y],\r\n          ['h', w],\r\n          ['v', h],\r\n          ['h', -w],\r\n          ['v', -h],\r\n          ['z']\r\n        ]\r\n      }\r\n\r\n      break\r\n    }\r\n    case 'circle':\r\n    case 'ellipse': {\r\n      let rx = this.rx()\r\n      let ry = this.ry()\r\n      let { cx, cy } = this.attr(['cx', 'cy'])\r\n\r\n      d = [\r\n        ['M', cx - rx, cy],\r\n        ['A', rx, ry, 0, 0, 0, cx + rx, cy],\r\n        ['A', rx, ry, 0, 0, 0, cx - rx, cy],\r\n        ['z']\r\n      ]\r\n\r\n      break\r\n    }\r\n    case 'polygon':\r\n    case 'polyline':\r\n    case 'line':\r\n\r\n      d = this.array().map(function (arr) {\r\n        return ['L'].concat(arr)\r\n      })\r\n\r\n      d[0][0] = 'M'\r\n\r\n      if (this.type === 'polygon') { d.push('Z') }\r\n\r\n      break\r\n    case 'path':\r\n      d = this.array()\r\n      break\r\n    default:\r\n      throw new Error('SVG toPath got unsupported type ' + this.type, this)\r\n    }\r\n\r\n    const path = new Path()\r\n      .plot(d)\r\n      .attr(normaliseAttributes(this.attr()))\r\n\r\n    if (replace) {\r\n      this.replace(path)\r\n    }\r\n\r\n    return path\r\n  }\r\n\r\n})\r\n"],"names":["Shape","toPath","d","replace","this","type","attr","w","width","h","height","rx","ry","x","y","cx","cy","array","map","arr","concat","push","Error","path","Path","plot","a","test","normaliseAttributes"],"mappings":";mCAYOA,QAAO,CAEZC,sBACMC,EADEC,oEAGEC,KAAKC,UACR,aAQCD,KAAKE,KAAK,CAAC,QAAS,SAAU,KAAM,KAAM,IAAK,MAN1CC,IAAPC,MACQC,IAARC,OACAC,IAAAA,GACAC,IAAAA,GACAC,IAAAA,EACAC,IAAAA,EAIEH,EAAK,IAAGA,EAAK,GACbC,EAAK,IAAGA,EAAK,GACjBD,EAAKA,GAAMC,EACXA,EAAKA,GAAMD,EACFJ,EAAI,EAATI,IAAYA,EAAKJ,EAAI,GAChBE,EAAI,EAATG,IAAYA,EAAKH,EAAI,GAKvBP,EAHES,GAAMC,EAGJ,CACF,CAAC,IAAKD,EAAKE,EAAGC,GACd,CAAC,IAAKP,EAAI,EAAII,GACd,CAAC,IAAKA,EAAIC,EAAI,EAAG,EAAG,EAAGD,EAAIC,GAC3B,CAAC,IAAKH,EAAI,EAAIG,GACd,CAAC,IAAKD,EAAIC,EAAI,EAAG,EAAG,GAAID,EAAIC,GAC5B,CAAC,IAAU,EAAID,EAARJ,GACP,CAAC,IAAKI,EAAIC,EAAI,EAAG,EAAG,GAAID,GAAKC,GAC7B,CAAC,IAAU,EAAIA,EAARH,GACP,CAAC,IAAKE,EAAIC,EAAI,EAAG,EAAG,EAAGD,GAAKC,GAC5B,CAAC,MAIC,CACF,CAAC,IAAKC,EAAGC,GACT,CAAC,IAAKP,GACN,CAAC,IAAKE,GACN,CAAC,KAAMF,GACP,CAAC,KAAME,GACP,CAAC,gBAMF,aACA,cACCE,EAAKP,KAAKO,KACVC,EAAKR,KAAKQ,OACGR,KAAKE,KAAK,CAAC,KAAM,OAA5BS,IAAAA,GAAIC,IAAAA,GAEVd,EAAI,CACF,CAAC,IAAKa,EAAKJ,EAAIK,GACf,CAAC,IAAKL,EAAIC,EAAI,EAAG,EAAG,EAAGG,EAAKJ,EAAIK,GAChC,CAAC,IAAKL,EAAIC,EAAI,EAAG,EAAG,EAAGG,EAAKJ,EAAIK,GAChC,CAAC,gBAKA,cACA,eACA,QAEHd,EAAIE,KAAKa,QAAQC,IAAI,SAAUC,SACtB,CAAC,KAAKC,OAAOD,MAGpB,GAAG,GAAK,IAEQ,YAAdf,KAAKC,MAAsBH,EAAEmB,KAAK,eAGnC,OACHnB,EAAIE,KAAKa,4BAGH,IAAIK,MAAM,mCAAqClB,KAAKC,KAAMD,UAG5DmB,GAAO,IAAIC,QACdC,KAAKvB,GACLI,KAlGqB,SAACA,OACtB,IAAMoB,KAAKpB,EACT,gCAAgCqB,KAAKD,WAAapB,EAAKoB,UAGvDpB,EA6FGsB,CAAoBxB,KAAKE,gBAE7BH,QACGA,QAAQoB,GAGRA"}